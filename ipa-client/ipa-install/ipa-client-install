#! /usr/bin/python -E
# Authors: Simo Sorce <ssorce@redhat.com>
#          Karl MacMillan <kmacmillan@mentalrootkit.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

try:
    import sys

    import os
    import time
    import socket

    from ipapython.ipa_log_manager import *
    import tempfile
    import getpass
    from base64 import b64decode
    from ipaclient import ipadiscovery
    import ipaclient.ipachangeconf
    import ipaclient.ntpconf
    from ipapython.ipautil import run, user_input, CalledProcessError, file_exists, realm_to_suffix
    import ipapython.services as ipaservices
    from ipapython import ipautil
    from ipapython import sysrestore
    from ipapython import version
    from ipapython import certmonger
    from ipapython.config import IPAOptionParser
    from ipalib import api, errors
    import SSSDConfig
    from ConfigParser import RawConfigParser
    from optparse import SUPPRESS_HELP, OptionGroup
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

CLIENT_INSTALL_ERROR = 1
CLIENT_NOT_CONFIGURED = 2
CLIENT_ALREADY_CONFIGURED = 3
CLIENT_UNINSTALL_ERROR = 4 # error after restoring files/state

client_nss_nickname_format = 'IPA Machine Certificate - %s'

def parse_options():
    parser = IPAOptionParser(version=version.VERSION)

    basic_group = OptionGroup(parser, "basic options")
    basic_group.add_option("--domain", dest="domain", help="domain name")
    basic_group.add_option("--server", dest="server", help="IPA server", action="append")
    basic_group.add_option("--realm", dest="realm_name", help="realm name")
    basic_group.add_option("--fixed-primary", dest="primary", action="store_true",
                      default=False, help="Configure sssd to use fixed server as primary IPA server")
    basic_group.add_option("-p", "--principal", dest="principal",
                      help="principal to use to join the IPA realm"),
    basic_group.add_option("-w", "--password", dest="password", sensitive=True,
                      help="password to join the IPA realm (assumes bulk password unless principal is also set)"),
    basic_group.add_option("-W", dest="prompt_password", action="store_true",
                      default=False,
                      help="Prompt for a password to join the IPA realm"),
    basic_group.add_option("--mkhomedir", dest="mkhomedir",
                      action="store_true", default=False,
                      help="create home directories for users on their first login")
    basic_group.add_option("", "--hostname", dest="hostname",
                      help="The hostname of this machine (FQDN). If specified, the hostname will be set and "
                           "the system configuration will be updated to persist over reboot. "
                           "By default a nodename result from uname(2) is used.")
    basic_group.add_option("--ntp-server", dest="ntp_server", help="ntp server to use")
    basic_group.add_option("-N", "--no-ntp", action="store_false",
                      help="do not configure ntp", default=True, dest="conf_ntp")
    basic_group.add_option("--ssh-trust-dns", dest="trust_sshfp", default=False, action="store_true",
                      help="configure OpenSSH client to trust DNS SSHFP records")
    basic_group.add_option("--no-sshd", dest="conf_sshd", default=True, action="store_false",
                      help="do not configure OpenSSH server")
    basic_group.add_option("--no-dns-sshfp", dest="create_sshfp", default=True, action="store_false",
                      help="do not automatically create DNS SSHFP records")
    basic_group.add_option("--noac", dest="no_ac", default=False, action="store_true",
                      help="do not use Authconfig to modify the nsswitch.conf and PAM configuration")
    basic_group.add_option("-f", "--force", dest="force", action="store_true",
                      default=False, help="force setting of LDAP/Kerberos conf")
    basic_group.add_option("-d", "--debug", dest="debug", action="store_true",
                      default=False, help="print debugging information")
    basic_group.add_option("-U", "--unattended", dest="unattended",
                      action="store_true",
                      help="unattended (un)installation never prompts the user")
    # --on-master is used in ipa-server-install and ipa-replica-install
    # only, it isn't meant to be used on clients.
    basic_group.add_option("--on-master", dest="on_master", action="store_true",
                      help=SUPPRESS_HELP, default=False)
    parser.add_option_group(basic_group)

    sssd_group = OptionGroup(parser, "SSSD options")
    sssd_group.add_option("--permit", dest="permit",
                      action="store_true", default=False,
                      help="disable access rules by default, permit all access.")
    sssd_group.add_option("", "--enable-dns-updates", dest="dns_updates",
                      action="store_true", default=False,
                      help="Configures the machine to attempt dns updates when the ip address changes.")
    sssd_group.add_option("--no-krb5-offline-passwords", dest="krb5_offline_passwords",
                      action="store_false", default=True,
                      help="Configure SSSD not to store user password when the server is offline")
    sssd_group.add_option("-S", "--no-sssd", dest="sssd",
                      action="store_false", default=True,
                      help="Do not configure the client to use SSSD for authentication")
    sssd_group.add_option("--preserve-sssd", dest="preserve_sssd",
                      action="store_true", default=False,
                      help="Preserve old SSSD configuration if possible")
    parser.add_option_group(sssd_group)

    uninstall_group = OptionGroup(parser, "uninstall options")
    uninstall_group.add_option("", "--uninstall", dest="uninstall", action="store_true",
                      default=False, help="uninstall an existing installation. The uninstall can " \
                                          "be run with --unattended option")
    parser.add_option_group(uninstall_group)

    options, args = parser.parse_args()
    safe_opts = parser.get_safe_opts(options)

    if (options.server and not options.domain):
        parser.error("--server cannot be used without providing --domain")

    return safe_opts, options

def logging_setup(options):
    log_file = "/var/log/ipaclient-install.log"

    if options.uninstall:
        log_file = "/var/log/ipaclient-uninstall.log"

    standard_logging_setup(
        filename=log_file, verbose=True, debug=options.debug,
        console_format='%(message)s')


def log_service_error(name, action, error):
    root_logger.error("%s failed to %s: %s", name, action, str(error))

def nickname_exists(nickname):
        (sout, serr, returncode) = run(["/usr/bin/certutil", "-L", "-d", "/etc/pki/nssdb", "-n", nickname], raiseonerr=False)

        if returncode == 0:
            return True
        else:
            return False

# Checks whether nss_ldap or nss-pam-ldapd is installed. If anyone of mandatory files was found returns True and list of all files found.
def nssldap_exists():
    files_to_check = [{'function':'configure_ldap_conf', 'mandatory':['/etc/ldap.conf','/etc/nss_ldap.conf','/etc/libnss-ldap.conf'], 'optional':['/etc/pam_ldap.conf']},
                      {'function':'configure_nslcd_conf', 'mandatory':['/etc/nslcd.conf']}]
    files_found = {}
    retval = False

    for function in files_to_check:
        files_found[function['function']]=[]
        for file_type in ['mandatory','optional']:
            try:
                for filename in function[file_type]:
                    if file_exists(filename):
                        files_found[function['function']].append(filename)
                        if file_type == 'mandatory':
                            retval = True
            except KeyError:
                pass

    return (retval, files_found)

def uninstall(options, env):

    if not fstore.has_files():
        root_logger.error("IPA client is not configured on this system.")
        return CLIENT_NOT_CONFIGURED

    server_fstore = sysrestore.FileStore('/var/lib/ipa/sysrestore')
    if server_fstore.has_files() and not options.on_master:
        root_logger.error(
            "IPA client is configured as a part of IPA server on this system.")
        root_logger.info("Refer to ipa-server-install for uninstallation.")
        return CLIENT_NOT_CONFIGURED

    try:
        run(["ipa-client-automount", "--uninstall", "--debug"])
    except Exception, e:
        root_logger.error(
            "Unconfigured automount client failed: %s", str(e))

    # Reload the state as automount unconfigure may have modified it
    fstore._load()
    statestore._load()

    hostname = None
    was_sssd_configured = False
    try:
        sssdconfig = SSSDConfig.SSSDConfig()
        sssdconfig.import_config()
        domains = sssdconfig.list_active_domains()
        if len(domains) > 1:
            # There was more than IPA domain configured
            was_sssd_configured = True
        for name in domains:
            domain = sssdconfig.get_domain(name)
            try:
                provider = domain.get_option('id_provider')
            except SSSDConfig.NoOptionError:
                continue
            if provider == "ipa":
                try:
                    hostname = domain.get_option('ipa_hostname')
                except SSSDConfig.NoOptionError:
                    continue
    except Exception, e:
        # We were unable to read existing SSSD config. This might mean few things:
        # - sssd wasn't installed
        # - sssd was removed after install and before uninstall
        # - there are no active domains
        # in both cases we cannot continue with SSSD
        pass

    if hostname is None:
        hostname = socket.getfqdn()

    client_nss_nickname = client_nss_nickname_format % hostname

    # Remove our host cert and CA cert
    if nickname_exists("IPA CA"):
        try:
            run(["/usr/bin/certutil", "-D", "-d", "/etc/pki/nssdb", "-n", "IPA CA"])
        except Exception, e:
            root_logger.error(
                "Failed to remove IPA CA from /etc/pki/nssdb: %s", str(e))

    # Always start certmonger. We can't untrack something if it isn't
    # running
    messagebus = ipaservices.knownservices.messagebus
    try:
        messagebus.start()
    except Exception, e:
        log_service_error(messagebus.service_name, 'start', e)

    cmonger = ipaservices.knownservices.certmonger
    try:
        cmonger.start()
    except Exception, e:
        log_service_error(cmonger.service_name, 'start', e)

    try:
        certmonger.stop_tracking('/etc/pki/nssdb', nickname=client_nss_nickname)
    except (CalledProcessError, RuntimeError), e:
        root_logger.error("%s failed to stop tracking certificate: %s",
            cmonger.service_name, str(e))

    if nickname_exists(client_nss_nickname):
        try:
            run(["/usr/bin/certutil", "-D", "-d", "/etc/pki/nssdb", "-n", client_nss_nickname])
        except Exception, e:
            root_logger.error("Failed to remove %s from /etc/pki/nssdb: %s",
                client_nss_nickname, str(e))

    try:
        cmonger.stop()
    except Exception, e:
        log_service_error(cmonger.service_name, 'stop', e)

    # Remove any special principal names we added to the IPA CA helper
    certmonger.remove_principal_from_cas()

    try:
        cmonger.disable()
    except Exception, e:
        root_logger.error(
            "Failed to disable automatic startup of the %s service: %s",
            cmonger.service_name, str(e))

    if not options.on_master and os.path.exists('/etc/ipa/default.conf'):
        root_logger.info("Unenrolling client from IPA server")
        join_args = ["/usr/sbin/ipa-join", "--unenroll", "-h", hostname]
        if options.debug:
            join_args.append("-d")
            env['XMLRPC_TRACE_CURL'] = 'yes'
        (stdout, stderr, returncode) = run(join_args, raiseonerr=False, env=env)
        if returncode != 0:
            root_logger.error("Unenrolling host failed: %s", stderr)

    if os.path.exists('/etc/ipa/default.conf'):
        root_logger.info(
            "Removing Kerberos service principals from /etc/krb5.keytab")
        try:
            parser = RawConfigParser()
            fp = open('/etc/ipa/default.conf', 'r')
            parser.readfp(fp)
            fp.close()
            realm = parser.get('global', 'realm')
            run(["/usr/sbin/ipa-rmkeytab", "-k", "/etc/krb5.keytab", "-r", realm])
        except Exception, e:
            root_logger.error(
                "Failed to remove Kerberos service principals: %s", str(e))

    root_logger.info("Disabling client Kerberos and LDAP configurations")
    was_sssd_installed = False
    was_sshd_configured = False
    if fstore.has_files():
        was_sssd_installed = fstore.has_file("/etc/sssd/sssd.conf")

        sshd_config = os.path.join(ipaservices.knownservices.sshd.get_config_dir(), "sshd_config")
        was_sshd_configured = fstore.has_file(sshd_config)
    try:
        auth_config = ipaservices.authconfig()
        if statestore.has_state('authconfig'):
            # disable only those configurations that we enabled during install
            for conf in ('ldap', 'krb5', 'sssd', 'sssdauth', 'mkhomedir'):
                cnf = statestore.restore_state('authconfig', conf)
                if cnf:
                    auth_config.disable(conf)
        else:
            # There was no authconfig status store
            # It means the code was upgraded after original install
            # Fall back to old logic
            auth_config.disable("ldap").\
                        disable("krb5")
            if not(was_sssd_installed and was_sssd_configured):
                # assume there was sssd.conf before install and there were more than one domain in it
                # In such case restoring sssd.conf will require us to keep SSSD running
                auth_config.disable("sssd").\
                            disable("sssdauth")
            auth_config.disable("mkhomedir")

        auth_config.add_option("update")
        auth_config.execute()
    except Exception, e:
        root_logger.error(
            "Failed to remove krb5/LDAP configuration: %s", str(e))
        return CLIENT_INSTALL_ERROR

    if fstore.has_files():
        root_logger.info("Restoring client configuration files")
        fstore.restore_all_files()

    old_hostname = statestore.restore_state('network', 'hostname')
    if old_hostname is not None and old_hostname != hostname:
        try:
            ipautil.run(['/bin/hostname', old_hostname])
        except CalledProcessError, e:
            root_logger.error(
                "Failed to set this machine's hostname to %s (%s).",
                old_hostname, str(e))

    nscd = ipaservices.knownservices.nscd
    if nscd.is_installed():
        try:
            nscd.restart()
        except:
            root_logger.warning(
                "Failed to restart the %s daemon", nscd.service_name)

        try:
            nscd.enable()
        except:
            root_logger.warning(
                "Failed to configure automatic startup of the %s daemon",
                nscd.service_name)
    else:
        # this is optional service, just log
        root_logger.info("%s daemon is not installed, skip configuration",
            nscd.service_name)

    nslcd = ipaservices.knownservices.nslcd
    if nslcd.is_installed():
        try:
            nslcd.stop()
        except:
            root_logger.warning(
                "Failed to stop the %s daemon", nslcd.service_name)

        try:
            nslcd.disable()
        except:
            root_logger.warning(
                "Failed to disable automatic startup of the %s daemon",
                nslcd.service_name)
    else:
        # this is optional service, just log
        root_logger.info("%s daemon is not installed, skip configuration",
            nslcd.service_name)

    ntp_configured = statestore.has_state('ntp')
    if ntp_configured:
        ntp_enabled = statestore.restore_state('ntp', 'enabled')
        ntp_step_tickers = statestore.restore_state('ntp', 'step-tickers')
        restored = False

        try:
            # Restore might fail due to file missing in backup
            # the reason for it might be that freeipa-client was updated
            # to this version but not unenrolled/enrolled again
            # In such case it is OK to fail
            restored = fstore.restore_file("/etc/ntp.conf")
            restored |= fstore.restore_file("/etc/sysconfig/ntpd")
            if ntp_step_tickers:
               restored |= fstore.restore_file("/etc/ntp/step-tickers")
        except:
            pass

        if not ntp_enabled:
           ipaservices.knownservices.ntpd.stop()
           ipaservices.knownservices.ntpd.disable()
        else:
           if restored:
               ipaservices.knownservices.ntpd.restart()

    if was_sshd_configured and ipaservices.knownservices.sshd.is_running():
        ipaservices.knownservices.sshd.restart()

    if was_sssd_installed and was_sssd_configured:
        # SSSD was installed before our installation, config now is restored, restart it
        root_logger.info(
            "The original configuration of SSSD included other domains than " +
            "the IPA-based one.")
        root_logger.info(
            "Original configuration file was restored, restarting SSSD " +
            "service.")
        sssd = ipaservices.service('sssd')
        sssd.restart()

    if not options.unattended:
        root_logger.info(
            "The original nsswitch.conf configuration has been restored.")
        root_logger.info(
            "You may need to restart services or reboot the machine.")
        if not options.on_master:
            if user_input("Do you want to reboot the machine?", False):
                try:
                    run(["/sbin/reboot"])
                except Exception, e:
                    root_logger.error(
                        "Reboot command failed to exceute: %s", str(e))
                    return CLIENT_UNINSTALL_ERROR

    rv = 0

    if fstore.has_files():
        root_logger.error('Some files have not been restored, see /var/lib/ipa-client/sysrestore/sysrestore.index')
    has_state = False
    for module in statestore.modules.keys():
            root_logger.error('Some installation state for %s has not been restored, see /var/lib/ipa/sysrestore/sysrestore.state' % module)
            has_state = True
            rv = 1

    if has_state:
        root_logger.warning('Some installation state has not been restored.\nThis may cause re-installation to fail.\nIt should be safe to remove /var/lib/ipa-client/sysrestore.state but it may\nmean your system hasn\'t be restored to its pre-installation state.')

    # Remove the IPA configuration file
    try:
        os.remove("/etc/ipa/default.conf")
    except:
        pass

    root_logger.info("Client uninstall complete.")

    return rv

def configure_ipa_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server):
    ipaconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    ipaconf.setOptionAssignment(" = ")
    ipaconf.setSectionNameDelimiters(("[","]"))

    opts = [{'name':'comment', 'type':'comment', 'value':'File modified by ipa-client-install'},
            {'name':'empty', 'type':'empty'}]

    #[global]
    defopts = [{'name':'basedn', 'type':'option', 'value':cli_basedn},
               {'name':'realm', 'type':'option', 'value':cli_realm},
               {'name':'domain', 'type':'option', 'value':cli_domain},
               {'name':'server', 'type':'option', 'value':cli_server[0]},
               {'name':'xmlrpc_uri', 'type':'option', 'value':'https://%s/ipa/xml' % ipautil.format_netloc(cli_server[0])},
               {'name':'enable_ra', 'type':'option', 'value':'True'}]

    opts.append({'name':'global', 'type':'section', 'value':defopts})
    opts.append({'name':'empty', 'type':'empty'})

    target_fname = '/etc/ipa/default.conf'
    fstore.backup_file(target_fname)
    ipaconf.newConf(target_fname, opts)
    os.chmod(target_fname, 0644)

    return 0

def configure_ldap_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server, dnsok, options, files):
    ldapconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    ldapconf.setOptionAssignment(" ")

    opts = [{'name':'comment', 'type':'comment', 'value':'File modified by ipa-client-install'},
            {'name':'empty', 'type':'empty'},
            {'name':'ldap_version', 'type':'option', 'value':'3'},
            {'name':'base', 'type':'option', 'value':cli_basedn},
            {'name':'empty', 'type':'empty'},
            {'name':'nss_base_passwd', 'type':'option', 'value':'cn=users,cn=accounts,'+cli_basedn+'?sub'},
            {'name':'nss_base_group', 'type':'option', 'value':'cn=groups,cn=accounts,'+cli_basedn+'?sub'},
            {'name':'nss_schema', 'type':'option', 'value':'rfc2307bis'},
            {'name':'nss_map_attribute', 'type':'option', 'value':'uniqueMember member'},
            {'name':'nss_initgroups_ignoreusers', 'type':'option', 'value':'root,dirsrv'},
            {'name':'empty', 'type':'empty'},
            {'name':'nss_reconnect_maxsleeptime', 'type':'option', 'value':'8'},
            {'name':'nss_reconnect_sleeptime', 'type':'option', 'value':'1'},
            {'name':'bind_timelimit', 'type':'option', 'value':'5'},
            {'name':'timelimit', 'type':'option', 'value':'15'},
            {'name':'empty', 'type':'empty'}]
    if not dnsok or options.force or options.on_master:
        if options.on_master:
            opts.append({'name':'uri', 'type':'option', 'value':'ldap://localhost'})
        else:
            opts.append({'name':'uri', 'type':'option', 'value':'ldap://'+ipautil.format_netloc(cli_server[0])})
    else:
        opts.append({'name':'nss_srv_domain', 'type':'option', 'value':cli_domain})

    opts.append({'name':'empty', 'type':'empty'})

    # Depending on the release and distribution this may exist in any
    # number of different file names, update what we find
    for filename in files:
        try:
            fstore.backup_file(filename)
            ldapconf.newConf(filename, opts)
        except Exception, e:
            root_logger.error("Creation of %s failed: %s", filename, str(e))
            return (1, 'LDAP', filename)

    if files:
        return (0, 'LDAP', ', '.join(files))

    return 0, None, None

def configure_nslcd_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server, dnsok, options, files):
    nslcdconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    nslcdconf.setOptionAssignment(" ")

    opts = [{'name':'comment', 'type':'comment', 'value':'File modified by ipa-client-install'},
            {'name':'empty', 'type':'empty'},
            {'name':'ldap_version', 'type':'option', 'value':'3'},
            {'name':'base', 'type':'option', 'value':cli_basedn},
            {'name':'empty', 'type':'empty'},
            {'name':'base passwd', 'type':'option', 'value':'cn=users,cn=accounts,'+cli_basedn},
            {'name':'base group', 'type':'option', 'value':'cn=groups,cn=accounts,'+cli_basedn},
            {'name':'map group', 'type':'option', 'value':'uniqueMember member'},
            {'name':'timelimit', 'type':'option', 'value':'15'},
            {'name':'empty', 'type':'empty'}]
    if not dnsok or options.force or options.on_master:
        if options.on_master:
            opts.append({'name':'uri', 'type':'option', 'value':'ldap://localhost'})
        else:
            opts.append({'name':'uri', 'type':'option', 'value':'ldap://'+ipautil.format_netloc(cli_server[0])})
    else:
        opts.append({'name':'uri', 'type':'option', 'value':'DNS'})

    opts.append({'name':'empty', 'type':'empty'})

    for filename in files:
        try:
            fstore.backup_file(filename)
            nslcdconf.newConf(filename, opts)
        except Exception, e:
            root_logger.error("Creation of %s failed: %s", filename, str(e))
            return (1, None, None)

    nslcd = ipaservices.knownservices.nslcd
    if nslcd.is_installed():
        try:
            nslcd.restart()
        except Exception, e:
            log_service_error(nslcd.service_name, 'restart', e)

        try:
            nslcd.enable()
        except Exception, e:
            root_logger.error(
                "Failed to enable automatic startup of the %s daemon: %s",
                nslcd.service_name, str(e))
    else:
        root_logger.debug("%s daemon is not installed, skip configuration",
            nslcd.service_name)
        return (0, None, None)

    return (0, 'NSLCD', ', '.join(files))

def configure_openldap_conf(fstore, cli_basedn, cli_server):
    ldapconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    ldapconf.setOptionAssignment(" ")

    opts = [{'name':'comment', 'type':'comment', 'value':'File modified by ipa-client-install'},
            {'name':'empty', 'type':'empty'},
            {'name':'URI', 'type':'option', 'value':'ldaps://'+  cli_server[0]},
            {'name':'BASE', 'type':'option', 'value':cli_basedn},
            {'name':'TLS_CACERT', 'type':'option', 'value':'/etc/ipa/ca.crt'},
            {'name':'empty', 'type':'empty'}]

    target_fname = '/etc/openldap/ldap.conf'
    fstore.backup_file(target_fname)
    ldapconf.newConf(target_fname, opts)
    os.chmod(target_fname, 0644)

def hardcode_ldap_server(cli_server):
    """
    DNS Discovery didn't return a valid IPA server, hardcode a value into
    the file instead.
    """
    if not file_exists('/etc/ldap.conf'):
        return

    ldapconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    ldapconf.setOptionAssignment(" ")

    opts = [{'name':'uri', 'type':'option', 'action':'set', 'value':'ldap://'+ipautil.format_netloc(cli_server[0])},
            {'name':'empty', 'type':'empty'}]

    # Errors raised by this should be caught by the caller
    ldapconf.changeConf("/etc/ldap.conf", opts)
    root_logger.info("Changed configuration of /etc/ldap.conf to use " +
        "hardcoded server name: %s", cli_server[0])

    return

def configure_krb5_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server, cli_kdc, dnsok, options, filename, client_domain):

    krbconf = ipaclient.ipachangeconf.IPAChangeConf("IPA Installer")
    krbconf.setOptionAssignment(" = ")
    krbconf.setSectionNameDelimiters(("[","]"))
    krbconf.setSubSectionDelimiters(("{","}"))
    krbconf.setIndent(("","  ","    "))

    opts = [{'name':'comment', 'type':'comment', 'value':'File modified by ipa-client-install'},
            {'name':'empty', 'type':'empty'}]

    #[libdefaults]
    libopts = [{'name':'default_realm', 'type':'option', 'value':cli_realm}]
    if not dnsok or not cli_kdc or options.force:
        libopts.append({'name':'dns_lookup_realm', 'type':'option', 'value':'false'})
        libopts.append({'name':'dns_lookup_kdc', 'type':'option', 'value':'false'})
    else:
        libopts.append({'name':'dns_lookup_realm', 'type':'option', 'value':'true'})
        libopts.append({'name':'dns_lookup_kdc', 'type':'option', 'value':'true'})
    libopts.append({'name':'rdns', 'type':'option', 'value':'false'})
    libopts.append({'name':'ticket_lifetime', 'type':'option', 'value':'24h'})
    libopts.append({'name':'forwardable', 'type':'option', 'value':'yes'})

    opts.append({'name':'libdefaults', 'type':'section', 'value':libopts})
    opts.append({'name':'empty', 'type':'empty'})

    #the following are necessary only if DNS discovery does not work
    kropts = []
    if not dnsok or not cli_kdc or options.force:
        #[realms]
        for server in cli_server:
            kropts.append({'name':'kdc', 'type':'option', 'value':ipautil.format_netloc(server, 88)})
            kropts.append({'name':'admin_server', 'type':'option', 'value':ipautil.format_netloc(server, 749)})
        kropts.append({'name':'default_domain', 'type':'option', 'value':cli_domain})
    kropts.append({'name':'pkinit_anchors', 'type':'option', 'value':'FILE:/etc/ipa/ca.crt'})
    ropts = [{'name':cli_realm, 'type':'subsection', 'value':kropts}]

    opts.append({'name':'realms', 'type':'section', 'value':ropts})
    opts.append({'name':'empty', 'type':'empty'})

    #[domain_realm]
    dropts = [{'name':'.'+cli_domain, 'type':'option', 'value':cli_realm},
              {'name':cli_domain, 'type':'option', 'value':cli_realm}]

    #add client domain mapping if different from server domain
    if cli_domain != client_domain:
        dropts.append({'name':'.'+client_domain, 'type':'option', 'value':cli_realm})
        dropts.append({'name':client_domain, 'type':'option', 'value':cli_realm})

    opts.append({'name':'domain_realm', 'type':'section', 'value':dropts})
    opts.append({'name':'empty', 'type':'empty'})

    root_logger.debug("Writing Kerberos configuration to %s:", filename)
    root_logger.debug("%s", krbconf.dump(opts))

    krbconf.newConf(filename, opts)
    os.chmod(filename, 0644)

    return 0

def configure_certmonger(fstore, subject_base, cli_realm, hostname, options):
    started = True
    principal = 'host/%s@%s' % (hostname, cli_realm)

    messagebus = ipaservices.knownservices.messagebus
    try:
        messagebus.start()
    except Exception, e:
        log_service_error(messagebus.service_name, 'start', e)

    # Ensure that certmonger has been started at least once to generate the
    # cas files in /var/lib/certmonger/cas.
    cmonger = ipaservices.knownservices.certmonger
    try:
        cmonger.restart()
    except Exception, e:
        log_service_error(cmonger.service_name, 'restart', e)

    if options.hostname:
        # It needs to be stopped if we touch them
        try:
            cmonger.stop()
        except Exception, e:
            log_service_error(cmonger.service_name, 'stop', e)
        # If the hostname is explicitly set then we need to tell certmonger
        # which principal name to use when requesting certs.
        certmonger.add_principal_to_cas(principal)

    try:
        cmonger.restart()
    except Exception, e:
        log_service_error(cmonger.service_name, 'restart', e)
        root_logger.warning(
            "Automatic certificate management will not be available")
        started = False

    try:
        cmonger.enable()
    except Exception, e:
        root_logger.error(
            "Failed to configure automatic startup of the %s daemon: %s",
            cmonger.service_name, str(e))
        root_logger.warning(
            "Automatic certificate management will not be available")

    # Request our host cert
    if started:
        client_nss_nickname = client_nss_nickname_format % hostname
        subject = 'CN=%s,%s' % (hostname, subject_base)
        try:
            run(["ipa-getcert", "request", "-d", "/etc/pki/nssdb", "-n", client_nss_nickname, "-N", subject, "-K", principal])
        except:
            root_logger.error(
                "%s request for host certificate failed", cmonger.service_name)

def configure_sssd_conf(fstore, cli_realm, cli_domain, cli_server, options, client_domain, client_hostname):
    try:
        sssdconfig = SSSDConfig.SSSDConfig()
        sssdconfig.import_config()
    except Exception, e:
        if os.path.exists("/etc/sssd/sssd.conf") and options.preserve_sssd:
            # SSSD config is in place but we are unable to read it
            # In addition, we are instructed to preserve it
            # This all means we can't use it and have to bail out
            root_logger.error(
                "SSSD config exists but cannot be parsed: %s", str(e))
            root_logger.error(
                "Was instructed to preserve existing SSSD config")
            root_logger.info("Correct errors in /etc/sssd/sssd.conf and " +
                "re-run installation")
            return 1

        # SSSD configuration does not exist or we are not asked to preserve it, create new one
        # We do make new SSSDConfig instance because IPAChangeConf-derived classes have no
        # means to reset their state and ParseError exception could come due to parsing
        # error from older version which cannot be upgraded anymore, leaving sssdconfig
        # instance practically unusable
        # Note that we already backed up sssd.conf before going into this routine
        if isinstance(e, IOError):
            pass
        else:
            # It was not IOError so it must have been parsing error
            root_logger.error("Unable to parse existing SSSD config. " +
                "As option --preserve-sssd was not specified, new config " +
                "will override the old one.")
            root_logger.info("The old /etc/sssd/sssd.conf is backed up and " +
                "will be restored during uninstall.")
        root_logger.info("New SSSD config will be created")
        sssdconfig = SSSDConfig.SSSDConfig()
        sssdconfig.new_config()

    try:
        domain = sssdconfig.new_domain(cli_domain)
    except SSSDConfig.DomainAlreadyExistsError:
        root_logger.info("Domain %s is already configured in existing SSSD " +
            "config, creating a new one.", cli_domain)
        root_logger.info("The old /etc/sssd/sssd.conf is backed up and will " +
            "be restored during uninstall.")
        sssdconfig = SSSDConfig.SSSDConfig()
        sssdconfig.new_config()
        domain = sssdconfig.new_domain(cli_domain)

    try:
        sssdconfig.activate_service('ssh')
    except SSSDConfig.NoServiceError:
        root_logger.error("Unable to activate the SSH service in SSSD config.")
        root_logger.info(
            "Please make sure you have SSSD built with SSH support installed.")
        root_logger.info(
            "Configure SSH support manually in /etc/sssd/sssd.conf.")

    domain.add_provider('ipa', 'id')

    #add discovery domain if client domain different from server domain
    if cli_domain != client_domain:
        domain.set_option('dns_discovery_domain', cli_domain)

    if not options.on_master:
        if options.primary:
            domain.set_option('ipa_server', ', '.join(cli_server))
        else:
            domain.set_option('ipa_server', '_srv_, %s' % ', '.join(cli_server))
    else:
        # the master should only use itself for Kerberos
        domain.set_option('ipa_server', cli_server[0])
    domain.set_option('ipa_domain', cli_domain)
    domain.set_option('ipa_hostname', client_hostname)
    if cli_domain.lower() != cli_realm.lower():
        domain.set_option('krb5_realm', cli_realm)

    # Might need this if /bin/hostname doesn't return a FQDN
    #domain.set_option('ipa_hostname', 'client.example.com')

    domain.add_provider('ipa', 'auth')
    domain.add_provider('ipa', 'chpass')
    if not options.permit:
        domain.add_provider('ipa', 'access')
    else:
        domain.add_provider('permit', 'access')

    domain.set_option('cache_credentials', True)

    # SSSD will need TLS for checking if ipaMigrationEnabled attribute is set
    # Note that SSSD will force StartTLS because the channel is later used for
    # authentication as well if password migration is enabled. Thus set the option
    # unconditionally.
    domain.set_option('ldap_tls_cacert', '/etc/ipa/ca.crt')

    if options.dns_updates:
        domain.set_option('ipa_dyndns_update', True)
    if options.krb5_offline_passwords:
        domain.set_option('krb5_store_password_if_offline', True)

    domain.set_active(True)

    sssdconfig.save_domain(domain)
    sssdconfig.write("/etc/sssd/sssd.conf")

    return 0

def change_ssh_config(filename, changes, sections):
    if len(changes) == 0:
        return True

    try:
        f = open(filename, 'r')
    except IOError, e:
        root_logger.error("Failed to open '%s': %s", filename, str(e))
        return False

    lines = []
    in_section = False
    for line in f:
        if in_section:
            lines.append(line)
            continue
        pline = line.strip()
        if len(pline) == 0 or pline.startswith('#'):
            lines.append(line)
            continue
        parts = pline.split()
        option = parts[0].lower()
        for key in sections:
            if key.lower() == option:
                in_section = True
                break
        if in_section:
            break
        for opt in changes:
            if opt.lower() == option:
                line = None
                break
        if line is not None:
            lines.append(line)
    for opt in changes:
        if changes[opt] is not None:
            lines.append('%s %s\n' % (opt, changes[opt]))
    lines.append('\n')
    if in_section:
        lines.append(line)
    for line in f:
        lines.append(line)

    f.close()

    try:
        f = open(filename, 'w')
    except IOError, e:
        root_logger.error("Failed to open '%s': %s", filename, str(e))
        return False

    f.write(''.join(lines))

    f.close()

    return True

def configure_ssh(fstore, ssh_dir, options):
    ssh_config = os.path.join(ssh_dir, 'ssh_config')
    sshd_config = os.path.join(ssh_dir, 'sshd_config')

    if file_exists(ssh_config):
        fstore.backup_file(ssh_config)

        changes = {
            'PubkeyAuthentication': 'yes',
        }

        if options.trust_sshfp:
            changes['VerifyHostKeyDNS'] = 'yes'
            changes['HostKeyAlgorithms'] = 'ssh-rsa,ssh-dss'
        elif options.sssd and file_exists('/usr/bin/sss_ssh_knownhostsproxy'):
            changes['ProxyCommand'] = '/usr/bin/sss_ssh_knownhostsproxy -p %p %h'
            changes['GlobalKnownHostsFile'] = '/var/lib/sss/pubconf/known_hosts'

        change_ssh_config(ssh_config, changes, ['Host'])
        root_logger.info('Configured %s', ssh_config)

    if not options.conf_sshd:
        return

    sshd = ipaservices.knownservices.sshd
    if not sshd.is_installed():
        root_logger.info("%s daemon is not installed, skip configuration",
            sshd.service_name)
        return

    fstore.backup_file(sshd_config)

    changes = {
        'PubkeyAuthentication': 'yes',
        'KerberosAuthentication': 'no',
        'GSSAPIAuthentication': 'yes',
        'UsePAM': 'yes',
    }

    if options.sssd and file_exists('/usr/bin/sss_ssh_authorizedkeys'):
        (stdout, stderr, retcode) = ipautil.run(['sshd', '-t', '-f', '/dev/null', '-o', 'AuthorizedKeysCommand='], raiseonerr=False)
        if retcode == 0:
            changes['AuthorizedKeysCommand'] = '/usr/bin/sss_ssh_authorizedkeys'
            changes['AuthorizedKeysCommandRunAs'] = None
        else:
            (stdout, stderr, retcode) = ipautil.run(['sshd', '-t', '-f', '/dev/null', '-o', 'PubKeyAgent='], raiseonerr=False)
            if retcode == 0:
                changes['PubKeyAgent'] = '/usr/bin/sss_ssh_authorizedkeys %u'
                changes['PubkeyAgentRunAs'] = None
            else:
                root_logger.warning("Installed OpenSSH server does not " +
                    "support dynamically loading authorized user keys. " +
                    "Public key authentication of IPA users will not be " +
                    "available.")

    change_ssh_config(sshd_config, changes, ['Match'])
    root_logger.info('Configured %s', sshd_config)

    if sshd.is_running():
        try:
            sshd.restart()
        except Exception, e:
            log_service_error(sshd.service_name, 'restart', e)

def resolve_ipaddress(server):
    """ Connect to the server's LDAP port in order to determine what ip
        address this machine uses as "public" ip (relative to the server).
    """

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_TCP)
    try:
        s.connect((server, 389))
        addr, port = s.getsockname()
    except socket.gaierror:
        s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, socket.IPPROTO_TCP)
        s.connect((server, 389))
        addr, port, foo, bar = s.getsockname()
    s.close()

    return addr

def do_nsupdate(update_txt):
    root_logger.debug("Writing nsupdate commands to %s:", UPDATE_FILE)
    root_logger.debug("%s", update_txt)

    update_fd = file(UPDATE_FILE, "w")
    update_fd.write(update_txt)
    update_fd.flush()
    update_fd.close()

    result = False
    try:
        ipautil.run(['/usr/bin/nsupdate', '-g', UPDATE_FILE])
        result = True
    except CalledProcessError, e:
        root_logger.debug('nsupdate failed: %s', str(e))

    try:
        os.remove(UPDATE_FILE)
    except:
        pass

    return result

UPDATE_TEMPLATE_A = """
zone $ZONE.
update delete $HOSTNAME. IN A
send
update add $HOSTNAME. $TTL IN A $IPADDRESS
send
"""

UPDATE_TEMPLATE_AAAA = """
zone $ZONE.
update delete $HOSTNAME. IN AAAA
send
update add $HOSTNAME. $TTL IN AAAA $IPADDRESS
send
"""

UPDATE_FILE = "/etc/ipa/.dns_update.txt"
CCACHE_FILE = "/etc/ipa/.dns_ccache"

def update_dns(server, hostname):

    ip = resolve_ipaddress(server)

    sub_dict = dict(HOSTNAME=hostname,
                    IPADDRESS=ip,
                    TTL=1200,
                    ZONE='.'.join(hostname.split('.')[1:])
                )

    if len(ip.split('.')) == 4:
        template = UPDATE_TEMPLATE_A
    elif ':' in ip:
        template = UPDATE_TEMPLATE_AAAA
    else:
        root_logger.info("Failed to determine this machine's ip address.")
        root_logger.warning("Failed to update DNS A record.")
        return

    update_txt = ipautil.template_str(template, sub_dict)

    if do_nsupdate(update_txt):
        root_logger.info("DNS server record set to: %s -> %s", hostname, ip)
    else:
        root_logger.error("Failed to update DNS records.")

def client_dns(server, hostname, dns_updates=False):

    dns_ok = ipautil.is_host_resolvable(hostname)

    if not dns_ok:
        root_logger.warning("Hostname (%s) not found in DNS", hostname)

    if dns_updates or not dns_ok:
        update_dns(server, hostname)

def update_ssh_keys(server, hostname, ssh_dir, create_sshfp):
    pubkeys = []
    for basename in os.listdir(ssh_dir):
        if not basename.endswith('.pub'):
            continue
        filename = os.path.join(ssh_dir, basename)

        try:
            f = open(filename, 'r')
        except IOError, e:
            root_logger.warning("Failed to open '%s': %s", filename, str(e))
            continue

        for line in f:
            line = line[:-1]
            if line.startswith('#'):
                continue
            parts = line.split()
            if len(parts) < 2:
                continue
            try:
                pubkey = b64decode(parts[1])
            except TypeError:
                continue
            try:
                algo, data, fp = ipautil.decode_ssh_pubkey(pubkey)
            except ValueError:
                continue
            if parts[0] != algo:
                continue
            root_logger.info("Adding SSH public key from %s", filename)
            pubkeys.append(unicode(parts[1]))

        f.close()

    try:
        result = api.Command['host_mod'](unicode(hostname), ipasshpubkey=pubkeys, updatedns=False)
    except errors.EmptyModlist:
        pass
    except StandardError, e:
        root_logger.info("host_mod: %s", str(e))
        root_logger.warning("Failed to upload host SSH public keys.")
        return

    if create_sshfp:
        zone = '.'.join(hostname.split('.')[1:])
        ttl = 1200

        update_txt = 'zone %s.\nupdate delete %s. IN SSHFP\nsend\n' % (zone, hostname)
        for pubkey in pubkeys:
            pubkey = b64decode(pubkey)
            sshfp = ipautil.make_sshfp(pubkey)
            if sshfp is not None:
                update_txt += 'update add %s. %s IN SSHFP %s\n' % (hostname, ttl, sshfp)
        update_txt += 'send\n'

        if not do_nsupdate(update_txt):
            root_logger.warning("Could not update DNS SSHFP records.")

def install(options, env, fstore, statestore):
    dnsok = False

    cli_domain = None
    cli_server = None
    subject_base = None

    cli_domain_source = 'Unknown source'
    cli_server_source = 'Unknown source'

    if options.unattended and (options.password is None and options.principal is None and options.prompt_password is False) and not options.on_master:
        root_logger.error("One of password and principal are required.")
        return CLIENT_INSTALL_ERROR

    if options.hostname:
        hostname = options.hostname
        hostname_source = 'Provided as option'
    else:
        hostname = socket.getfqdn()
        hostname_source = "Machine's FQDN"
    if hostname != hostname.lower():
        root_logger.error(
            "Invalid hostname '%s', must be lower-case.", hostname)
        return CLIENT_INSTALL_ERROR
    if (hostname == 'localhost') or (hostname == 'localhost.localdomain'):
        root_logger.error("Invalid hostname, '%s' must not be used.", hostname)
        return CLIENT_INSTALL_ERROR

    # when installing with '--no-sssd' option, check whether nss-ldap is installed
    if not options.sssd:
        (nssldap_installed, nosssd_files) = nssldap_exists()
        if not nssldap_installed:
            root_logger.error("One of these packages must be installed: " +
                "nss_ldap or nss-pam-ldapd")
            return CLIENT_INSTALL_ERROR

    # Create the discovery instance
    ds = ipadiscovery.IPADiscovery()

    # Do discovery on the first server passed in, we'll do sanity checking
    # on any others
    ret = ds.search(domain=options.domain, server=options.server, hostname=hostname)

    if ret == ipadiscovery.BAD_HOST_CONFIG:
        root_logger.error("Can't get the fully qualified name of this host")
        root_logger.info("Check that the client is properly configured")
        return CLIENT_INSTALL_ERROR
    if ret == ipadiscovery.NOT_FQDN:
        root_logger.error("%s is not a fully-qualified hostname", hostname)
        return CLIENT_INSTALL_ERROR
    if ret in (ipadiscovery.NO_LDAP_SERVER, ipadiscovery.NOT_IPA_SERVER) \
            or not ds.domain:
        if ret == ipadiscovery.NO_LDAP_SERVER:
            if ds.server:
                root_logger.debug("%s is not an LDAP server" % ds.server)
            else:
                root_logger.debug("No LDAP server found")
        elif ret == ipadiscovery.NOT_IPA_SERVER:
            if ds.server:
                root_logger.debug("%s is not an IPA server" % ds.server)
            else:
                root_logger.debug("No IPA server found")
        else:
            root_logger.debug("Domain not found")
        if options.domain:
            cli_domain = options.domain
            cli_domain_source = 'Provided as option'
        elif options.unattended:
            root_logger.error(
                "Unable to discover domain, not provided on command line")
            return CLIENT_INSTALL_ERROR
        else:
            root_logger.info(
                "DNS discovery failed to determine your DNS domain")
            cli_domain = user_input("Provide the domain name of your IPA server (ex: example.com)", allow_empty = False)
            cli_domain_source = 'Provided interactively'
            root_logger.debug(
                "will use interactively provided domain: %s", cli_domain)
        ret = ds.search(domain=cli_domain, server=options.server, hostname=hostname)

    if not cli_domain:
        if ds.domain:
            cli_domain = ds.domain
            cli_domain_source = ds.domain_source
            root_logger.debug("will use discovered domain: %s", cli_domain)

    client_domain = hostname[hostname.find(".")+1:]

    if ret in (ipadiscovery.NO_LDAP_SERVER, ipadiscovery.NOT_IPA_SERVER) \
            or not ds.server:
        root_logger.debug("IPA Server not found")
        if options.server:
            cli_server = options.server
            cli_server_source = 'Provided as option'
        elif options.unattended:
            root_logger.error("Unable to find IPA Server to join")
            return CLIENT_INSTALL_ERROR
        else:
            root_logger.debug("DNS discovery failed to find the IPA Server")
            cli_server = [user_input("Provide your IPA server name (ex: ipa.example.com)", allow_empty = False)]
            cli_server_source = 'Provided interactively'
            root_logger.debug("will use interactively provided server: %s", cli_server[0])
        ret = ds.search(domain=cli_domain, server=cli_server, hostname=hostname)

    else:
        # Only set dnsok to True if we were not passed in one or more servers
        # and if DNS discovery actually worked.
        if not options.server:
            (server, domain) = ds.check_domain(ds.domain, set(), "Validating DNS Discovery")
            if server and domain:
                root_logger.debug("DNS validated, enabling discovery")
                dnsok = True
            else:
                root_logger.debug("DNS discovery failed, disabling discovery")
        else:
            root_logger.debug("Using servers from command line, disabling DNS discovery")

    if not cli_server:
        if options.server:
            cli_server = options.server
            cli_server_source = 'Provided as option'
            root_logger.debug("will use provided server: %s", ', '.join(options.server))
        elif ds.server:
            cli_server = [ds.server]
            cli_server_source = ds.server_source
            root_logger.debug("will use discovered server: %s", cli_server[0])

    if ret == ipadiscovery.NOT_IPA_SERVER:
        root_logger.error("%s is not an IPA v2 Server.", cli_server[0])
        root_logger.debug("(%s: %s)", cli_server[0], cli_server_source)
        return CLIENT_INSTALL_ERROR

    if ret == ipadiscovery.NO_ACCESS_TO_LDAP:
        root_logger.warning("Anonymous access to the LDAP server is disabled.")
        root_logger.info("Proceeding without strict verification.")
        root_logger.info("Note: This is not an error if anonymous access " +
            "has been explicitly restricted.")
        ret = 0

    if ret != 0:
        root_logger.error("Failed to verify that %s is an IPA Server.",
            cli_server[0])
        root_logger.error("This may mean that the remote server is not up " +
            "or is not reachable due to network or firewall settings.")
        root_logger.debug("(%s: %s)", cli_server[0], cli_server_source)
        return CLIENT_INSTALL_ERROR

    cli_kdc = ds.kdc
    if dnsok and not cli_kdc:
        root_logger.error("DNS domain '%s' is not configured for automatic " +
            "KDC address lookup.", ds.realm.lower())
        root_logger.debug("(%s: %s)", ds.realm, ds.realm_source)
        root_logger.error("KDC address will be set to fixed value.")

    if dnsok:
        root_logger.info("Discovery was successful!")
    elif not options.unattended:
        if not options.server:
            root_logger.warning("The failure to use DNS to find your IPA" +
                " server indicates that your resolv.conf file is not properly" +
                " configured.")
        root_logger.info("Autodiscovery of servers for failover cannot work " +
            "with this configuration.")
        root_logger.info("If you proceed with the installation, services " +
            "will be configured to always access the discovered server for " +
            "all operations and will not fail over to other servers in case " +
            "of failure.")
        if not user_input("Proceed with fixed values and no DNS discovery?", False):
            return CLIENT_INSTALL_ERROR

    cli_realm = ds.realm
    cli_realm_source = ds.realm_source
    root_logger.debug("will use discovered realm: %s", cli_realm)

    if options.realm_name and options.realm_name != cli_realm:
        root_logger.error(
            "The provided realm name [%s] does not match discovered one [%s]",
            options.realm_name, cli_realm)
        root_logger.debug("(%s: %s)", cli_realm, cli_realm_source)
        return CLIENT_INSTALL_ERROR

    cli_basedn = ds.basedn
    cli_basedn_source = ds.basedn_source
    root_logger.debug("will use discovered basedn: %s", cli_basedn)
    subject_base = "O=%s" % cli_realm

    # Now do a sanity check on the other servers
    if options.server and len(options.server) > 1:
        for server in options.server[1:]:
            ret = ds.search(domain=cli_domain, server=server, hostname=hostname)
            if ret == ipadiscovery.NOT_IPA_SERVER:
                root_logger.error("%s is not an IPA v2 Server.", server)
                root_logger.debug("(%s: %s)", server, cli_server_source)
                return CLIENT_INSTALL_ERROR

    root_logger.info("Hostname: %s", hostname)
    root_logger.debug("Hostname source: %s", hostname_source)
    root_logger.info("Realm: %s", cli_realm)
    root_logger.debug("Realm source: %s", cli_realm_source)
    root_logger.info("DNS Domain: %s", cli_domain)
    root_logger.debug("DNS Domain source: %s", cli_domain_source)
    root_logger.info("IPA Server: %s", ', '.join(cli_server))
    root_logger.debug("IPA Server source: %s", cli_server_source)
    root_logger.info("BaseDN: %s", cli_basedn)
    root_logger.debug("BaseDN source: %s", cli_basedn_source)

    print
    if not options.unattended and not user_input("Continue to configure the system with these values?", False):
        return CLIENT_INSTALL_ERROR

    if not options.on_master:
        # Try removing old principals from the keytab
        try:
            ipautil.run(['/usr/sbin/ipa-rmkeytab',
                '-k', '/etc/krb5.keytab', '-r', cli_realm])
        except CalledProcessError, e:
            if e.returncode not in (3, 5):
                # 3 - Unable to open keytab
                # 5 - Principal name or realm not found in keytab
                root_logger.error("Error trying to clean keytab: " +
                    "/usr/sbin/ipa-rmkeytab returned %s" % e.returncode)
        else:
            root_logger.info("Removed old keys for realm %s from %s" % (
                cli_realm, '/etc/krb5.keytab'))

    if options.hostname and not options.on_master:
        # configure /etc/sysconfig/network to contain the hostname we set.
        # skip this step when run by ipa-server-install as it always configures
        # hostname if different from system hostname
        ipaservices.backup_and_replace_hostname(fstore, statestore, options.hostname)

    if not options.unattended:
        if options.principal is None and options.password is None and options.prompt_password is False:
            options.principal = user_input("User authorized to enroll computers", allow_empty=False)
            root_logger.debug(
                "will use principal provided as option: %s", options.principal)

    # Get the CA certificate
    try:
        # Remove anything already there so that wget doesn't use its
        # too-clever renaming feature
        os.remove("/etc/ipa/ca.crt")
    except:
        pass

    try:
        run(["/usr/bin/wget", "-O", "/etc/ipa/ca.crt", "http://%s/ipa/config/ca.crt" % ipautil.format_netloc(cli_server[0])])
    except CalledProcessError, e:
        root_logger.error(
            'Retrieving CA from %s failed: %s', cli_server[0], str(e))
        return CLIENT_INSTALL_ERROR

    if not options.on_master:
        nolog = tuple()
        # First test out the kerberos configuration
        try:
            # Attempt to sync time with IPA server.
            # We assume that NTP servers are discoverable through SRV records in the DNS
            # If that fails, we try to sync directly with IPA server, assuming it runs NTP
            root_logger.info('Synchronizing time with KDC...')
            ntp_servers = ds.ipadns_search_srv(cli_domain, '_ntp._udp', None, break_on_first=False)
            synced_ntp = False
            if ntp_servers:
                for s in ntp_servers:
                    synced_ntp = ipaclient.ntpconf.synconce_ntp(s, debug=True)
                    if synced_ntp:
                        break
            if not synced_ntp:
                synced_ntp = ipaclient.ntpconf.synconce_ntp(cli_server[0], debug=True)
            if not synced_ntp:
                root_logger.warning("Unable to sync time with IPA NTP " +
                    "server, assuming the time is in sync.")
            (krb_fd, krb_name) = tempfile.mkstemp()
            os.close(krb_fd)
            if configure_krb5_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server, cli_kdc, dnsok, options, krb_name, client_domain):
                root_logger.error("Test kerberos configuration failed")
                return CLIENT_INSTALL_ERROR
            env['KRB5_CONFIG'] = krb_name
            join_args = ["/usr/sbin/ipa-join", "-s", cli_server[0], "-b", realm_to_suffix(cli_realm)]
            if options.debug:
                join_args.append("-d")
                env['XMLRPC_TRACE_CURL'] = 'yes'
            if options.hostname:
                join_args.append("-h")
                join_args.append(options.hostname)
            if options.principal is not None:
                stdin = None
                principal = options.principal
                if principal.find('@') == -1:
                    principal = '%s@%s' % (principal, cli_realm)
                if options.password is not None:
                    stdin = options.password
                else:
                    if not options.unattended:
                        try:
                            stdin = getpass.getpass("Password for %s: " % principal)
                        except EOFError:
                            stdin = None
                        if not stdin:
                            root_logger.error(
                                "Password must be provided for %s.", principal)
                            return CLIENT_INSTALL_ERROR
                    else:
                        if sys.stdin.isatty():
                            root_logger.error("Password must be provided in " +
                                "non-interactive mode.")
                            root_logger.info("This can be done via " +
                                "echo password | ipa-client-install ... " +
                                "or with the -w option.")
                            return CLIENT_INSTALL_ERROR
                        else:
                            stdin = sys.stdin.readline()

                (stderr, stdout, returncode) = run(["kinit", principal], raiseonerr=False, stdin=stdin, env=env)
                if returncode != 0:
                    root_logger.error("Kerberos authentication failed")
                    root_logger.info("%s", stdout)
                    return CLIENT_INSTALL_ERROR
            elif options.password:
                nolog = (options.password,)
                join_args.append("-w")
                join_args.append(options.password)
            elif options.prompt_password:
                if options.unattended:
                    root_logger.error(
                        "Password must be provided in non-interactive mode")
                    return CLIENT_INSTALL_ERROR
                try:
                    password = getpass.getpass("Password: ")
                except EOFError:
                    password = None
                if not password:
                    root_logger.error("Password must be provided.")
                    return CLIENT_INSTALL_ERROR
                join_args.append("-w")
                join_args.append(password)
                nolog = (password,)

            # Now join the domain
            (stdout, stderr, returncode) = run(join_args, raiseonerr=False, env=env, nolog=nolog)

            if returncode != 0:
                root_logger.error("Joining realm failed: %s", stderr)
                if not options.force:
                    return CLIENT_INSTALL_ERROR
                root_logger.info("Use ipa-getkeytab to obtain a host " +
                    "principal for this server.")
            else:
                root_logger.info("Enrolled in IPA realm %s", cli_realm)

            start = stderr.find('Certificate subject base is: ')
            if start >= 0:
                start = start + 29
                subject_base = stderr[start:]
                subject_base = subject_base.strip()

        finally:
            if options.principal is not None:
                (stderr, stdout, returncode) = run(["kdestroy"], raiseonerr=False, env=env)
            try:
                os.remove(krb_name)
            except OSError:
                root_logger.error("Could not remove %s", krb_name)
            try:
                os.remove(krb_name + ".ipabkp")
            except OSError:
                root_logger.error("Could not remove %s.ipabkp", krb_name)

    # Configure ipa.conf
    if not options.on_master:
        configure_ipa_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server)
        root_logger.info("Created /etc/ipa/default.conf")

    api.bootstrap(context='cli_installer', debug=options.debug)
    api.finalize()
    if 'config_loaded' not in api.env:
        root_logger.error("Failed to initialize IPA API.")
        return CLIENT_INSTALL_ERROR

    # Always back up sssd.conf. It gets updated by authconfig --enablekrb5.
    fstore.backup_file("/etc/sssd/sssd.conf")
    if options.sssd:
        if configure_sssd_conf(fstore, cli_realm, cli_domain, cli_server, options, client_domain, hostname):
            return CLIENT_INSTALL_ERROR
        root_logger.info("Configured /etc/sssd/sssd.conf")

    # Add the CA to the default NSS database and trust it
    try:
        run(["/usr/bin/certutil", "-A", "-d", "/etc/pki/nssdb", "-n", "IPA CA", "-t", "CT,C,C", "-a", "-i", "/etc/ipa/ca.crt"])
    except CalledProcessError, e:
        root_logger.info("Failed to add CA to the default NSS database.")
        return CLIENT_INSTALL_ERROR

    # If on master assume kerberos is already configured properly.
    if not options.on_master:
        # Configure krb5.conf
        fstore.backup_file("/etc/krb5.conf")
        if configure_krb5_conf(fstore, cli_basedn, cli_realm, cli_domain, cli_server, cli_kdc, dnsok, options, "/etc/krb5.conf", client_domain):
            return CLIENT_INSTALL_ERROR

        root_logger.info(
            "Configured /etc/krb5.conf for IPA realm %s", cli_realm)

    os.environ['KRB5CCNAME'] = CCACHE_FILE
    try:
        ipautil.run(['/usr/bin/kinit', '-k', '-t', '/etc/krb5.keytab', 'host/%s@%s' % (hostname, cli_realm)])
    except CalledProcessError, e:
        root_logger.error("Failed to obtain host TGT.")
        # fail to obtain ticket makes it impossible to login and bind from sssd to LDAP,
        # abort installation and rollback changes
        return CLIENT_INSTALL_ERROR

    # Now, we have a TGT, lets try to connect to the server's XML-RPC interface
    try:
        api.Backend.xmlclient.connect()
    except errors.KerberosError, e:
        root_logger.info('Cannot connect to the server due to ' +
            'Kerberos error: %s. Trying with delegate=True', str(e))
        try:
            api.Backend.xmlclient.connect(delegate=True)
            root_logger.info('Connection with delegate=True successful')

            # The remote server is not capable of Kerberos S4U2Proxy delegation
            # This features is implemented in IPA server version 2.2 and higher
            root_logger.warning("Target IPA server has a lower version than " +
                "the enrolled client")
            root_logger.warning("Some capabilities including the ipa " +
                "command capability may not be available")
        except errors.PublicError, e2:
            root_logger.warning(
                'Second connect with delegate=True also failed: %s', str(e2))
            root_logger.error(
                "Cannot connect to the IPA server XML-RPC interface: %s",
                str(e2))
            return CLIENT_INSTALL_ERROR
    except errors.PublicError, e:
        root_logger.error(
            'Cannot connect to the server due to generic error: %s', str(e))
        return CLIENT_INSTALL_ERROR

    if not options.on_master:
        client_dns(cli_server[0], hostname, options.dns_updates)
        configure_certmonger(fstore, subject_base, cli_realm, hostname, options)

    update_ssh_keys(cli_server[0], hostname, ipaservices.knownservices.sshd.get_config_dir(), options.create_sshfp)

    try:
        os.remove(CCACHE_FILE)
    except:
        pass

    #Name Server Caching Daemon. Disable for SSSD, use otherwise (if installed)
    nscd = ipaservices.knownservices.nscd
    if nscd.is_installed():
        try:
            if options.sssd:
                nscd_service_action = 'stop'
                nscd.stop()
            else:
                nscd_service_action = 'restart'
                nscd.restart()
        except:
            root_logger.warning("Failed to %s the %s daemon",
                nscd_service_action, nscd.service_name)
            if not options.sssd:
                root_logger.warning(
                    "Caching of users/groups will not be available")

        try:
            if options.sssd:
                nscd.disable()
            else:
                nscd.enable()
        except:
            if not options.sssd:
                root_logger.warning(
                    "Failed to configure automatic startup of the %s daemon",
                    nscd.service_name)
                root_logger.info("Caching of users/groups will not be " +
                    "available after reboot")
            else:
                root_logger.warning(
                    "Failed to disable %s daemon. Disable it manually.",
                    nscd.service_name)

    else:
        # this is optional service, just log
        if not options.sssd:
            root_logger.info("%s daemon is not installed, skip configuration",
                nscd.service_name)

    retcode, conf, filename = (0, None, None)

    if not options.no_ac:
        # Modify nsswitch/pam stack
        auth_config = ipaservices.authconfig()
        if options.sssd:
            statestore.backup_state('authconfig', 'sssd', True)
            statestore.backup_state('authconfig', 'sssdauth', True)
            auth_config.enable("sssd").\
                        enable("sssdauth")
            message = "SSSD enabled"
            conf = 'SSSD'
        else:
            statestore.backup_state('authconfig', 'ldap', True)
            auth_config.enable("ldap").\
                        enable("forcelegacy")
            message = "LDAP enabled"

        if options.mkhomedir:
            statestore.backup_state('authconfig', 'mkhomedir', True)
            auth_config.enable("mkhomedir")

        auth_config.add_option("update")
        auth_config.execute()
        root_logger.info("%s", message)

        if not options.sssd:
            #Modify pam to add pam_krb5 only when sssd is not in use
            auth_config.reset()
            statestore.backup_state('authconfig', 'krb5', True)
            auth_config.enable("krb5").\
                        add_option("update").\
                        add_option("nostart")
            auth_config.execute()
            root_logger.info("Kerberos 5 enabled")

        # Update non-SSSD LDAP configuration after authconfig calls as it would
        # change its configuration otherways
        if not options.sssd:
            for configurer in [configure_ldap_conf, configure_nslcd_conf]:
                (retcode, conf, filenames) = configurer(fstore, cli_basedn, cli_realm, cli_domain, cli_server, dnsok, options, nosssd_files[configurer.__name__])
                if retcode:
                    return CLIENT_INSTALL_ERROR
                if conf:
                    root_logger.info(
                        "%s configured using configuration file(s) %s",
                        conf, filenames)

        configure_openldap_conf(fstore, cli_basedn, cli_server)
        root_logger.info("Configured /etc/openldap/ldap.conf")

        #Check that nss is working properly
        if not options.on_master:
            n = 0
            found = False
            # Loop for up to 10 seconds to see if nss is working properly.
            # It can sometimes take a few seconds to connect to the remote provider.
            # Particulary, SSSD might take longer than 6-8 seconds.
            while n < 10 and not found:
                try:
                    ipautil.run(["getent", "passwd", "admin"])
                    found = True
                except Exception, e:
                    time.sleep(1)
                    n = n + 1

            if not found:
                root_logger.error(
                    "Unable to find 'admin' user with 'getent passwd admin'!")
                if conf:
                    root_logger.info("Recognized configuration: %s", conf)
                else:
                    root_logger.error("Unable to reliably detect " +
                        "configuration. Check NSS setup manually.")

                try:
                    hardcode_ldap_server(cli_server)
                except Exception, e:
                    root_logger.error("Adding hardcoded server name to " +
                        "/etc/ldap.conf failed: %s", str(e))

    if options.conf_ntp and not options.on_master:
        if options.ntp_server:
            ntp_server = options.ntp_server
        else:
            ntp_server = cli_server[0]
        ipaclient.ntpconf.config_ntp(ntp_server, fstore, statestore)
        root_logger.info("NTP enabled")

    configure_ssh(fstore, ipaservices.knownservices.sshd.get_config_dir(), options)

    root_logger.info('Client configuration complete.')

    return 0

def main():
    safe_options, options = parse_options()

    if not os.getegid() == 0:
        sys.exit("\nYou must be root to run ipa-client-install.\n")
    ipaservices.check_selinux_status()
    logging_setup(options)
    root_logger.debug(
        '%s was invoked with options: %s', sys.argv[0], safe_options)
    root_logger.debug("missing options might be asked for interactively later")

    env={"PATH":"/bin:/sbin:/usr/kerberos/bin:/usr/kerberos/sbin:/usr/bin:/usr/sbin"}

    global fstore
    fstore = sysrestore.FileStore('/var/lib/ipa-client/sysrestore')

    global statestore
    statestore = sysrestore.StateFile('/var/lib/ipa-client/sysrestore')

    if options.uninstall:
        return uninstall(options, env)

    if fstore.has_files():
        root_logger.error("IPA client is already configured on this system.")
        root_logger.info(
            "If you want to reinstall the IPA client, uninstall it first.")
        return CLIENT_ALREADY_CONFIGURED

    rval = install(options, env, fstore, statestore)
    if rval == CLIENT_INSTALL_ERROR:
        if options.force:
            root_logger.warning(
                "Installation failed. Force set so not rolling back changes.")
        else:
            root_logger.error("Installation failed. Rolling back changes.")
            options.unattended = True
            uninstall(options, env)

    return rval

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt:
    sys.exit(1)
except RuntimeError, e:
    sys.exit(e)
finally:
    try:
        os.remove(CCACHE_FILE)
    except:
        pass
